using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using PdfiumViewer;

namespace pdftopng.Services
{
    public class PdfCropService: IPdfCropService
    {
        private readonly ILogger<PdfCropService> _logger;

        public PdfCropService(ILogger<PdfCropService> logger)
        {
            _logger = logger;
        }

        public async Task CropPdfPageAsync(IFormFile formFile, string outputPath, int x, int y, int with, int height)
        {
            var filePath = Path.GetTempFileName();

            _logger.LogInformation(filePath);

            string path = Directory.GetCurrentDirectory();

            if (!Directory.Exists(path + "/image"))
                Directory.CreateDirectory(path + "/image");

            using (var stream = System.IO.File.Create(filePath))
            {
                // The formFile is the method parameter which type is IFormFile
                // Saves the files to the local file system using a file name generated by the app.
                await formFile.CopyToAsync(stream);
            }

            using (var document = PdfDocument.Load(filePath))
            {
                for (int i = 0; i < document.PageCount; i++)
                {
                    using (var image = document.Render(i, 300, 300, true))
                    {
                        _logger.LogInformation("vào đây rồi");
                        image.Save(path + "/image/convert.png", ImageFormat.Png);
                    }
                }
            }

            // Load the image
            using (Bitmap originalImage = new Bitmap(path + "/image/convert.png"))
            {
                // Ensure the crop rectangle is within the bounds of the original image
                Rectangle cropRect = new Rectangle(x, y, with, height);
                cropRect.Intersect(new Rectangle(0, 0, originalImage.Width, originalImage.Height));
                _logger.LogInformation("vào đây rồi!hhaa" + originalImage.Width);

                // Crop the image
                using (Bitmap croppedImage = originalImage.Clone(cropRect, originalImage.PixelFormat))
                {
                    _logger.LogInformation("vào đây rồi!hi hi" + originalImage.Width);

                    // Save the cropped image
                    string outputDirectory = outputPath == "/image/convert1.png" ? path + "/image/convert1.png" : outputPath;

                    _logger.LogInformation("vào đây rồi!he he " + outputDirectory);

                    croppedImage.Save(outputDirectory, ImageFormat.Png);
                }
            }

            File.Delete(filePath);
        }
       
    }
    public interface IPdfCropService
    {
        Task CropPdfPageAsync(IFormFile files, string outputPath, int x, int y, int with, int height);
    }
}
